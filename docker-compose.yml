services:
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command: mongod --bind_ip_all
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: zookeeper:3.9.3
    container_name: e-commerce-project-zookeeper-1
    ports:
      - "22181:2181"
    environment:
      ZOO_CLIENT_PORT: 2181
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: e-commerce-project-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: e-commerce-project-elasticsearch-1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - http.port=9200
      - http.host=0.0.0.0
      - network.host=0.0.0.0
      - transport.host=127.0.0.1
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    container_name: e-commerce-project-kibana-1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  monolith:
    build:
      context: ./backend/monolith
      dockerfile: Dockerfile
    container_name: e-commerce-project-monolith-1
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/e-commerce
      - REDIS_HOST=redis
      - KAFKA_BROKERS=kafka:29092
      - ELASTICSEARCH_NODE=http://elasticsearch:9200
      - JWT_SECRET=your_jwt_secret_key
      - REDIS_PORT=6379
      - SEED_DB=true
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 10s
      timeout: 5s
      retries: 3

  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: e-commerce-project-payment-service-1
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/payment-service
      - KAFKA_BROKERS=kafka:29092
      - JWT_SECRET=your_jwt_secret_key
      - FRONTEND_URL=http://frontend:3500
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5001"]
      interval: 10s
      timeout: 10s
      retries: 3

  billing-service:
    build:
      context: ./backend/billing-service
      dockerfile: Dockerfile
    container_name: e-commerce-project-billing-service-1
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/billing-service
      - KAFKA_BROKERS=kafka:29092
      - JWT_SECRET=your_jwt_secret_key
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5002"]
      interval: 10s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: e-commerce-project-frontend-1
    ports:
      - "3500:3500"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_PAYMENT_URL=http://localhost:5001/api
      - REACT_APP_WS_URL=ws://localhost:5000
    depends_on:
      - monolith
      - payment-service
    networks:
      - app-network

volumes:
  mongodb_data:
  elasticsearch_data:
  redis_data:
  kafka_data:

networks:
  app-network:
    driver: bridge
